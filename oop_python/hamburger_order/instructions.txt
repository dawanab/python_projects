> The purpose of this application is to help a company called Bill's Burgers manage 
the process of selling their hamburgers. And in order to match Bill's menu, you will 
need to create three(3) classes: Hamburger, DeluxeBurger, and HealthyBurger. 

Hamburger ----------------------------------------------------------------------------->
> For the base Hamburger class, there will need to be four variables to represent the 
four basic ingredients of the hamburger: 
    - name, meat, price, and bread_roll_type.

> A constructor will need to accept these four values as parameters when creating a 
new hamburger.

> There will also need to be separate variables for four(4) possible additions to the 
hamburger. Those should be declared with these names: 
    - addition_1_name, addition_1_price, addition_2_name, addition_2_price, 
    addition_3_name, addition_3_price, addition_4_name, and addition_4_price. 

> Five(5) methods are also needed inside the Hamburger class. Four(4) for adding up to 
four additions to the hamburger, and one(1) for printing out an itemized listing of the 
final hamburger with addons, if any, and the total price. 

> Remember that a name and price must be accepted as parameters in the first four methods 
so that the price of the hamburger is adjusted accordingly. These methods should be named: 
    - add_hamburger_addition_1, add_hamburger_addition_2, add_hamburger_addition_3, 
    add_hamburger_addition_4, and itemize_hamburger. 

> The first four methods do not return values, but the last method does return the total price 
of the hamburger, which includes the base price of the hamburger plus any additional items. 

DeluxeBurger -------------------------------------------------------------------------->
> For the second class, DeluxeBurger, there are no additional member variables, 
and the constructor accepts no parameters. Instead, the constructor creates a deluxe burger 
with all the fixings and chips and a drink for a base price of $19.10. The constructor can be 
configured in any way, as long as chips and drink are added for the total price just mentioned. 

> In this class, the four(4) methods defined in the Hamburger class for including additional 
toppings must each be overridden so that a message is printed stating that no additional items 
can be added to a deluxe burger.

HealthyBurger --------------------------------------------------------------------------->
> And for the third class, HealthyBurger, there will be four(4) additional member variables 
called:  healthy_Extra_1_Name, healthy_extra_1_price, healthy_extra_2_name, and 
healthy_extra_2_price. The constructor for this class accepts two(2) parameters for meat and 
price. Those are set in the constructor along with an appropriate name for the type of burger. 

> Two methods, add_healthy_addition_1 and add_healthy_addition_2 should be created that each 
accept a name and price for the addition, allowing for up to two(2) addons to the basic healthy 
burger. 

> And finally the itemize_hamburger method created in the Hamburger class should be overridden 
to generate a message appropriate to the type of burger along with any addons. 
The method also returns the total price of the healthy burger of type double.
